#!/bin/bash

# confirm user has root access
if [ $EUID -ne "0" ]; then
	echo "You must have root access to install Zatsuma - try again with 'sudo ./setup.sh'"
	exit 1
fi

clear
echo -e "Zatsuma Install-O-Matic for Ubuntu Linux"

# collect config information
echo -e "\nEnter a name for your shop, this should be 15 characters or less"
read -p 'Zatsuma shop name         : ' zatsuma_name

echo -e "\nEnter a user account name for your shop and each coin/node you want to install (leave blank to skip) :-\n"
echo -e "- New user accounts are created if required."
echo -e "- Nodes can be installed on DIFFERENT user accounts (recommended)."
echo -e "- You can use an existing node (not recommended).\n"

read -p 'Zatsuma Shop Daemon       : ' user_zatsuma
read -p 'ZEC : Zcash   (required)  : ' user_zec
read -p 'YEC : Ycash   (optional)  : ' user_yec
read -p 'BTC : Bitcoin (on-chain)  : ' user_btc
read -p 'BTC : Bitcoin (lightning) : ' user_btcln

while [ -z "$user_zatsuma" ]				# make sure we have a user account for zatsuma
do
	read -p 'Zatsuma User (required)   : ' user_zatsuma
done

while [ -z "$user_zec" ]				# make sure we have a user account for ZEC
do
	read -p 'ZEC : Zcash   (required)  : ' user_zec
done

if [ ! -z "$user_btcln" ] 				# lightning must use the bitcoin user account
then
	user_btcln="$user_btc"	
fi

start_zec="none"					# get startup instructions
start_yec="none"
start_btc="none"
start_btcln="none"
start_zatsuma="none"

echo -e "\nIf you want a node daemon to start automatically, type auto :-"

read -p 'Zatsuma Shop Daemon       : ' start_zatsuma

if [ ! -z $user_zec ]
then
	read -p 'Zcash node                : ' start_zec
fi

if [ ! -z $user_btc ]
then
	read -p 'Bitcoin node (on-chain)   : ' start_btc
fi

if [ ! -z $user_btcln ]
then
	read -p 'Bitcoin node (lightning)  : ' start_btcln
fi

echo -e "\nChoose a password for the zatsuma database (least 10 chars and must contain letters, capitals, numbers and symbols :-"
read -p 'MYSQL zatsuma password    : ' mysql_zatsuma

echo -e "\nEnter your CoinLib API key (register on https://coinlib.io & see Account->Profile) :-"
read -p 'CoinLib API key           : ' coinlib_api

COINLIB="`wget -qO - https://coinlib.io/api/v1/global?key=$coinlib_api&pref=USD`"
while [ -z "$COINLIB" ]
do
	echo "...your Coinlib API key is invalid, try again"
	read -p 'CoinLib API key           : ' coinlib_api
	COINLIB="`wget -qO - https://coinlib.io/api/v1/global?key=$coinlib_api&pref=USD`"
done


echo -e "\nEnter your DuckDNS domain and token if you want your Zatsuma to be publicly available (register on https://duckdns.org) :-"
read -p 'DuckDNS domain            : ' duckdns_domain
read -p 'DuckDNS token             : ' duckdns_token


DUCKDNS=""
while [ ! -z "$duckdns_domain" ] && [ ! -z "$duckdns_token" ] && [ "$DUCKDNS" != "OK" ]
do
	DUCKDNS="`wget -qO - https://www.duckdns.org/update/$duckdns_domain/$duckdns_token`"

	if [ -z "$DUCKDNS" ] 
	then
		echo -e "\nYour DuckDNS domain or token were not recognised\n"
		echo -e "\nEnter your DuckDNS domain and token (or leave blank for local install) :-"
		read -p 'DuckDNS domain            : ' duckdns_domain
		read -p 'DuckDNS token             : ' duckdns_token

		if [ -z "$duckdns_domain" ] && [ -z "$duckdns_token" ]
		then
			DUCKDNS = "OK"
		fi
	fi
done

if [ ! -z "$DUCKDNS" ] && [ ! -z "$duckdns_domain" ] && [ -z "$duckdns_token" ]
then
	echo "...public webserver install, checking connectivity"

	TEST="`wget -qO - http://$duckdns_domain.duckdns.org`"

	while [ -z "$TEST" ]
	do
		echo "WARNING: You must open and forward ports 80 & 443 on your router to this machine."
		echo "WARNING: Please do that now and then :-"
		echo "WARNING: - for public install, type public"
		echo "WARNING: - for local install, type local"
   	        read -p 'WARNING: Type of install : ' query
		if [ "$query" == "local" ]
		then
			TEST="OK"
			duckdns_domain=""
			duckdns_token=""
		else
			TEST="`wget -qO - http://$duckdns_domain.duckdns.org`"
		fi
	done
fi

if [ -z "$duckdns_domain" ]
then
	echo "Installation type         : LOCAL  - zatsuma will be at http://127.0.0.1"
else
	echo "Installation type         : PUBLIC - zatsuma will be at https://$duckdns_domain.duckdns.org"
fi

echo -e "\n########### EXTREMELY IMPORTANT #############"
echo -e "\nThis software has been released under the MIT Licence, use this software at your own risk!"
echo -e "\nYOU MUST READ AND AGREE WITH THE SOFTWARE LICENCE BEFORE PROCEEDING WITH THE INSTALLATION"
echo -e "\n########### EXTREMELY IMPORTANT #############\n"

read -p 'Confirm the details you entered are correct, type install to continue or Ctrl-C to exit: ' default

if [ $default != "install" ]
then
	echo "Install aborted"
	exit
fi

echo "...creating user accounts"
if [ -d "/home/$user_zatsuma" ] && [ ! -z "$user_zatsuma" ]
then
	echo "...using existing account '$user_zatsuma' for zatsuma"
	crontab -u $user_zatsuma -l | grep -v zatsuma >/tmp/crontab 2>/dev/null
	crontab -u $user_zatsuma /tmp/crontab
	mkdir /home/$user_zatsuma/.zatsuma 2>/dev/null
else
	if [ ! -z "$user_zatsuma" ]
	then
		echo -e "\n...creating new user account '$user_zatsuma' for zatsuma"
		adduser $user_zatsuma
		mkdir /home/$user_zatsuma/.zatsuma 2>/dev/null
	fi
fi

if [ -d "/home/$user_zec" ] && [ ! -z "$user_zec" ]
then
	echo "...using existing account '$user_zec' for zcash node"
	crontab -u $user_zec -l | grep -v zatsuma >/tmp/crontab 2>/dev/null
	crontab -u $user_zec /tmp/crontab
else
	if [ ! -z "$user_zec" ]
	then
		echo -e "\n...creating new user account '$user_zec' for zcash node"
		adduser $user_zec	
		mkdir /home/$user_zec/.zatsuma 2>/dev/null
		chown -R $user_zec.$user_zec /home/$user_zec/.zatsuma
	fi
fi

if [ -d "/home/$user_yec" ] && [ ! -z "$user_yec" ]
then
	echo "...using existing account '$user_yec' for ycash node"
	crontab -u $user_yec -l | grep -v zatsuma >/tmp/crontab 2>/dev/null
	crontab -u $user_yec /tmp/crontab
else
	if [ ! -z "$user_yec" ]
	then
		echo -e "\n...creating new user account '$user_yec' for ycash node"
		adduser $user_yec	
		mkdir /home/$user_yec/.zatsuma 2>/dev/null
		chown -R $user_yec.$user_yec /home/$user_yec/.zatsuma
	fi
fi


if [ -d "/home/$user_btc" ] && [ ! -z "$user_btc" ]
then
	echo "...using existing account '$user_btc' for bitcoin node"
	crontab -u $user_btc -l | grep -v zatsuma >/tmp/crontab 2>/dev/null
	crontab -u $user_btc /tmp/crontab
else
	if [ ! -z "$user_btc" ]
	then
		echo -e "\n...creating new user account '$user_btc' for bitcoin node"
		adduser $user_btc	
		mkdir /home/$user_btc/.zatsuma 2>/dev/null
		chown -R $user_btc.$user_btc /home/$user_btc/.zatsuma
	else 
		echo "...skipping user account for bitcoin"
	fi
fi


echo "...updating system"
apt-get -qq update
apt-get -qq upgrade

echo "...removing old packages"
apt-get -qq autoremove
apt-get -qq autoclean

echo "...installing essential build components"
apt-get -qq install git build-essential apt-transport-https wget gnupg2 

echo "...installing mysql"
apt-get -qq install mysql-server libmysqlclient-dev
mysql_secure_installation --use-default	

echo "...installing apache2 webserver"
apt-get -qq install apache2

echo "...installing perl"
apt-get -qq install perl libdbi-perl libdbd-mysql-perl

echo "...installing perl modules"
cpan install CPAN
cpan install CGI CGI::Cookie IO::Socket::INET JSON JSON::RPC::Client Encode DBI DBD::mysql LWP::UserAgent HTTP::Request String::HexConvert HTML::Restrict HTML::Entities Data::Dumper List::Util

mkdir -p /usr/local/bin/zatsuma 2>/dev/null

echo "...installing zatsuma daemons"
cp shopd/*.txt /home/$user_zatsuma/.zatsuma
cp shopd/shopd shopd/*.txt /usr/local/bin/zatsuma
cp shopd-zec/shopd-zec /usr/local/bin/zatsuma
cp shopd-zec/shopd-yec /usr/local/bin/zatsuma
cp shopd-btc/shopd-btc /usr/local/bin/zatsuma
cp shopd-btcln/shopd-btcln /usr/local/bin/zatsuma
chmod +x /usr/local/bin/zatsuma/*

echo "...generating configuration (shopd.conf)"
grep -v "REPLACE" shopd/shopd.conf >/home/$user_zatsuma/.zatsuma/shopd.conf
echo -e "\n\n# CONFIGURED BY SETUP SCRIPT" >>/home/$user_zatsuma/.zatsuma/shopd.conf
echo -e "shopname = \"$zatsuma_name\"\ncoinlib_api = \"$coinlib_api\"\nduckdns_domain = \"$duckdns_domain\"\nduckdns_token = \"$duckdns_token\"\ndbpassword = \"$mysql_zatsuma\"" >>/home/$user_zatsuma/.zatsuma/shopd.conf

if [ ! -z "$user_zec" ]					# generate config dirs & files
then
	echo "...installing zatsuma shop daemon for zcash (shopd-zec)"
	cp shopd-zec/shopd-zec.conf /home/$user_zec/.zatsuma
	chown -R $user_zec.$user_zec /home/$user_zec/.zatsuma
fi

if [ ! -z "$user_yec" ]
then
	echo "...installing zatsuma shop daemon for ycash (shopd-yec)"
	cp shopd-btc/shopd-yec.conf /home/$user_yec/.zatsuma
	chown -R $user_yec.$user_yec /home/$user_yec/.zatsuma
fi

if [ ! -z "$user_btc" ]
then
	echo "...installing zatsuma shop daemon for bitcoin (shopd-btc)"
	cp shopd-btc/shopd-btc.conf /home/$user_btc/.zatsuma
	chown -R $user_btc.$user_btc /home/$user_btc/.zatsuma
fi

if [ ! -z "$user_btcln" ]
then
	echo "...installing zatsuma shop daemon for bitcoin lightning (shopd-btcln)"
	cp shopd-btcln/shopd-btcln.conf /home/$user_btcln/.zatsuma
	chown -R $user_btcln.$user_btcln /home/$user_btcln/.zatsuma
fi

chmod +x /usr/local/bin/zatsuma/*			# make daemons executable

echo "...creating empty zatsuma database, please enter your MYSQL root password :-"

# Note: Really needs to archive & drop any existing database
echo -e "create database zatsuma;\nGRANT ALL PRIVILEGES ON zatsuma.* TO 'zatsuma'@'localhost' IDENTIFIED BY '$mysql_zatsuma';\nuse zatsuma;" >/tmp/zatsuma.sql
cat shopd/zatsuma.sql >>/tmp/zatsuma.sql
mysql -u root -p < /tmp/zatsuma.sql
	

if [ "$start_zatsuma" == "auto" ] 			# auto/manual start for zatsuma daemon
then
	# TODO: Change to use systemd
fi 


echo "...configuring webserver"
sudo a2dissite 000-default.conf
cp webserver/zatsuma.conf /etc/apache2/sites-available
cp -r webserver/* /var/www	

if [ -z "$duckdns_domain" ]
then
	echo "...zatsuma installed for local machine use only"
	echo "...adding zatstuma.localhost to /etc/hosts"

	LOCALHOST=`grep 127.0.0.1 /etc/hosts`
	if [[ $LOCALHOST == *"zatsuma.localhost"* ]]
	then
		echo "...zatsuma.localhost already in /etc/hosts"
	else
		echo "...adding zatstuma.localhost to /etc/hosts"
		echo "$LOCALHOST zatsuma.localhost" >/tmp/zatsuma-hosts
		grep -v 127.0.0.1 /etc/hosts >>/tmp/zatsuma-hosts
		mv /tmp/zatsuma-hosts /etc/hosts
		chmod 655 /etc/hosts
	fi
else
	echo "...updating website config for remote access to http://$duckdns_domain.duckdns.org"
	sed -i "s/\#ServerName REPLACE/ServerName ${duckdns_domain}/g" /etc/apache2/sites-available/zatsuma.conf
	sed -i "s/http:\/zatsuma.localhost/https:\/\/${duckdns_domain}.duckdns.org/g" /var/www/html/js/zatsuma.js
fi
sudo a2ensite zatsuma.conf

chmod +x /var/www/cgi-bin/zatsuma.cgi

echo "...enabling webserver modules"
a2enmod cgi

echo "...restarting webserver"
systemctl daemon-reload
service apache2 restart

if [ ! -z "$duckdns_domain" ]
then
	CERTBOT=`which certbot`						# check certbot has been installed
	if [ -z "$CERTBOT" ]
	then
		echo "...installing repositories for certbot"
		apt-get -qq install software-properties-common
		add-apt-repository universe
		add-apt-repository ppa:certbot/certbot

		echo "...updating system"
		apt-get -qq update

		echo "...installing certbot"
		apt-get -qq install certbot python-certbot-apache
	fi

	echo "...installing SSL certificate"
	certbot --apache

	echo "...patching zatsuma javascript client to use SSL"
	sed -i "s/http:\/\/127.0.0.1\/cgi-bin\/zatsuma.cgi/https:\/\/${duckdns_domain}.duckdns.org\/cgi-bin\/zatsuma.cgi/g" /etc/apache2/sites-available/zatsuma.conf

	echo "...restarting webserver"
	service apache2 restart 
fi

echo -e "\nINSTALLING ZCASH (zcashd)\n"

ZCASHD=`which zcashd`							# check zcashd has been installed
if [ -z $ZCASHD ]
then
	echo "...zcashd is not already installed"
	echo "...adding zcash repository"
	wget -qO - https://apt.z.cash/zcash.asc | apt-key add -
	echo "deb [arch=amd64] https://apt.z.cash/ jessie main" | tee /etc/apt/sources.list.d/zcash.list

	echo "...installing zcashd"
	apt-get update
	apt-get install zcash
else 
	echo "...zcash has already been installed"
fi

echo "...checking zcash configuration (zcash.conf)"
if [ ! -d "/home/$user_zec/.zcash" ]
then
	mkdir /home/$user_zec/.zcash 2>/dev/null
	chown $user_zec.$user_zec /home/$user_zec/.zcash
fi

touch /home/$user_zec/.zcash/zcash.conf					# setup zcash config
if [ -d "/home/$user_zec/.zcash/zcash.conf" ]
then
	echo "...checking/updating zcash.conf settings"

	if [ ! "`grep rpcuser /home/$user_zec/.zcash/zcash.conf`" ]
	then
		echo "...adding rpcuser"
		echo "rpcuser=$user_zec" >>/home/$user_zec/.zcash/zcash.conf	
	else
		echo "...rpcuser already set"
	fi

	if [ ! "`grep rpcport /home/$user_zec/.zcash/zcash.conf`" ]
	then
		echo "...adding rpcport"
		echo "rpcport=8232" >>/home/$user_zec/.zcash/zcash.conf	
	else
		echo "...rpcport already set"
	fi

	if [ ! "`grep rpcpassword /home/$user_zec/.zcash/zcash.conf`" ]
	then
		echo "...adding random rpcpassword"
		RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
		echo "rpcpassword=$RPCPASSWORD" >>/home/$user_zec/.zcash/zcash.conf	
	else
		echo "...rpcpassword already set"
	fi

	if [ ! "`grep walletnotify /home/$user_zec/.zcash/zcash.conf`" ]
	then
		echo "...adding walletnotify"
		echo "walletnotify=/usr/local/bin/zatsuma/shopd-zec -notify %s" >>/home/$user_zec/.zcash/zcash.conf
	else 
		echo "...walletnotify already set"
	fi
else 
	echo -e "...generating new zcash configuration /home/$user_zec/.zcash/zcash.conf"
	RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
	echo -e "mainnet=1\nlisten=1\naddnode=mainnet.z.cash\nrpcport=8232\nwalletnotify=/usr/local/bin/zatsuma/shopd-zec -notify %s\nrpcuser=$user_zec\nrpcpassword=$RPCPASSWORD" >/home/$user_zec/.zcash/zcash.conf
	echo "...setting ownership of /home/$user_zec/.zcash to $user_zec"
	chown -R $user_zec.$user_zec /home/$user_zec/.zcash
fi


echo -e "...downloading zcash parameters, this will take a while\n"	
OLDHOME=$HOME
export HOME=/home/$user_zec
sudo --preserve-env --user=$user_zec /usr/bin/zcash-fetch-params	
export HOME=$OLDHOME


ZCASHD=`which zcashd`
if [ "$start_zec" == "auto" ] 					# auto/manual start for zcashd
then
	#TODO: Change to use systemd
fi 

echo "...zcash installation complete"	


if [ ! -z "$user_yec" ]
then

	echo -e "\nINSTALLING YCASH (ycashd)\n"

	OLDHOME=$HOME
	export HOME=/home/$user_yec

	echo -e "...downloading ycash version 2.0.6.1 from github"
	wget https://github.com/ycashfoundation/yecwallet/releases/download/2.0.6.1/linux-binaries-ycash-v2.0.6.1.tar.gz

	echo -e "...extracting ycashd, ycash-cli, yecwallet"
	tar xf linux-binaries-ycash-v2.0.6.1.tar.gz

	echo -e "...moving binaries to /usr/local/bin"
	mv ycash-v2.0.6.1/y* /usr/local/bin

	touch /home/$user_yec/.ycash/ycash.conf					# setup zcash config
	if [ -d "/home/$user_yec/.ycash/ycash.conf" ]
	then
		echo "...checking/updating ycash.conf settings"

		if [ ! "`grep rpcuser /home/$user_yec/.ycash/ycash.conf`" ]
		then
			echo "...adding rpcuser"
			echo "rpcuser=$user_yec" >>/home/$user_yec/.ycash/ycash.conf	
		else
			echo "...rpcuser already set"
		fi
	
		if [ ! "`grep rpcport /home/$user_yec/.ycash/ycash.conf`" ]
		then
			echo "...adding rpcport"
			echo "rpcport=8832" >>/home/$user_yec/.ycash/ycash.conf	
		else
			echo "...rpcport already set"
		fi
	
		if [ ! "`grep rpcpassword /home/$user_yec/.ycash/ycash.conf`" ]
		then
			echo "...adding random rpcpassword"
			RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
			echo "rpcpassword=$RPCPASSWORD" >>/home/$user_yec/.ycash/ycash.conf	
		else
			echo "...rpcpassword already set"
		fi
	
		if [ ! "`grep walletnotify /home/$user_yec/.ycash/ycash.conf`" ]
		then
			echo "...adding walletnotify"
			echo "walletnotify=/usr/local/bin/zatsuma/shopd-yec -notify %s" >>/home/$user_yec/.ycash/ycash.conf
		else 
			echo "...walletnotify already set"
		fi
	else 
		echo -e "...generating new ycash configuration /home/$user_yec/.ycash/ycash.conf"
		RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
		echo -e "mainnet=1\nlisten=1\naddnode=mainnet.ycash.xyz\nrpcport=8832\nwalletnotify=/usr/local/bin/zatsuma/shopd-yec -notify %s\nrpcuser=$user_yec\nrpcpassword=$RPCPASSWORD" >/home/$user_yec/.ycash/ycash.conf
		echo "...setting ownership of /home/$user_yec/.ycash to $user_yec"
		chown -R $user_yec.$user_yec /home/$user_yec/.ycash
	fi

	if [ $user_yec != $user_zec ]
	then
		echo -e "...skipping zcash parameters, already downloaded for user $user_yec"
	else
		echo -e "...downloading zcash parameters, this will take a while unless you already have them\n"	
		sudo --preserve-env --user=$user_yec /usr/bin/zcash-fetch-params	
	fi

	export HOME=$OLDHOME
else
	echo -e "...not installing ycashd"
fi



BITCOIND=`which bitcoind`

if [ ! -z "$user_btc" ] 
then
	echo -e "\nINSTALLING BITCOIN (bitcoind)\n"

	BITCOIND=`which bitcoind`
	if [ -z "$BITCOIND" ] 
	then
		echo -e "...downloading bitcoin-core-0.18.0 from https://bitcoin.org\n"
		wget https://bitcoin.org/bin/bitcoin-core-0.18.0/bitcoin-0.18.0-x86_64-linux-gnu.tar.gz

		echo -e "...unpacking files";
		tar xf bitcoin-0.18.0-x86_64-linux-gnu.tar.gz
	
		echo -e "...installing bitcoin-0.18.0 to /usr/local/bin";
		install -m 0755 -o root -g root -t /usr/local/bin bitcoin-0.18.0/bin/*
	
		echo -e "...cleaning up downloaded files"
		rm -rf bitcoin-0.18.0*
	fi

	if [ -d "/home/$user_btc/.bitcoin" ]
	then
		echo "...checking/updating bitcoin.conf settings"

		if [ ! "`grep server /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding server"
			echo -e "server=1" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...server already set"
		fi

		if [ ! "`grep listen /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding listen"
			echo -e "listen=1" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...listen already set"
		fi

		if [ ! "`grep daemon /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding daemon"
			echo -e "daemon=1" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...daemon already set"
		fi

		if [ ! "`grep daemon /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding txindex"
			echo -e "txindex=1" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...txindex already set"
		fi

		if [ ! "`grep rpcuser /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding rpcuser"
			echo "rpcuser=$user_zec" >>/home/$user_btc/.bitcoin/bitcoin.conf	
		else
			echo "...rpcuser already set"
		fi
	
		if [ ! "`grep rpcport /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding rpcport"
			echo "rpcport=8332" >>/home/$user_btc/.bitcoin/bitcoin.conf	
		else
			echo "...rpcport already set"
		fi

		if [ ! "`grep rpcpassword /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding random rpcpassword"
			RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
			echo "rpcpassword=$RPCPASSWORD" >>/home/$user_btc/.bitcoin/bitcoin.conf	
		else
			echo "...rpcpassword already set"
		fi

		if [ ! "`grep walletnotify /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding walletnotify"
			echo "walletnotify=/usr/local/bin/zatsuma/shopd-btc -notify %s" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...walletnotify already set"
		fi

		if [ ! "`grep zmqpubrawblock /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding zmqpubrawblock"
			echo -e "zmqpubrawblock=tcp://127.0.0.1:18501" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...zmqpubrawblock already set"
		fi

		if [ ! "`grep zmqpubrawblock /home/$user_btc/.bitcoin/bitcoin.conf`" ]
		then
			echo "...adding zmqpubrawtx"
			echo -e "zmqpubrawtx=tcp://127.0.0.1:18502" >>/home/$user_btc/.bitcoin/bitcoin.conf
		else 
			echo "...zmqpubrawtx already set"
		fi
	else 
		echo -e "\n...generating bitcoin configuration (/home/$user_btc/.bitcoin/bitcoin.conf)\n"
		mkdir /home/$user_btc/.bitcoin 2>/dev/null
		RPCPASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
		echo -e "server=1\nlisten=1\ndaemon=1\ntxindex=1\nwalletnotify=/usr/local/bin/zatsuma/shopd-btc -notify %s\nrpcuser=$user_btc\nrpcpassword=$RPCPASSWORD\nrpcport=8332\nzmqrawblock=tcp://127.0.0.1:18501\nzmqpubrawtx=tcp://127.0.0.1:18502\n" >/home/$user_btc/.bitcoin/bitcoin.conf
		echo "...setting ownership of /home/$user_btc/.bitcoin to $user_btc"
		chown -R $user_btc.$user_btc /home/$user_btc/.bitcoin
	fi
else
	echo "...not installing bitcoind"
fi


if [ ! -z "$user_btcln" ]		# Install Bitcoin Lightning
then
	echo -e "\nINSTALLING BITCOIN LIGHTNING (lnd)\n"

	BITCOIND="`which bitcoind`"	# check that bitcoin has already been installed
	if [ ! -z $BITCOIND ]
	then

		if [ ! -d /home/$user_btcln/.lnd ]
		then

			echo "...downloading go from https://dl.google.com"
			wget https://dl.google.com/go/go1.12.3.linux-amd64.tar.gz
	
			echo "...extracting files to /usr/local"
			tar -C /usr/local -xzf go1.12.3.linux-amd64.tar.gz
	
			echo "...extracting files to /usr/local"
			export PATH=$PATH:/usr/local/go/bin
			export GOPATH=/home/$user_btcln/gocode
			export PATH=$PATH:$GOPATH/bin
		
			echo "...downloading lnd"
			go get -d github.com/lightningnetwork/lnd
			
			echo -e "...building lnd\n"
			cd $GOPATH/src/github.com/lightningnetwork/lnd
			make
			make install
	
			echo "...generating configuration file (lnd.conf)"
			mkdir -p /home/$user_btcln/.lnd 2>/dev/null
			echo "[Application Options]" > /home/$user_btcln/.lnd/lnd.conf
			echo "externalip=$duckdns_domain.duckdns.org" >>/home/$user_btcln/.lnd/lnd.conf
			echo "alias=$duckdns_domain" >>/home/$user_btcln/.lnd/lnd.conf
			echo -e "\n[Bitcoin]" >>/home/$user_btcln/.lnd/lnd.conf
			echo "bitcoin.active=1" >>/home/$user_btcln/.lnd/lnd.conf
			echo "bitcoin.mainnet=1" >>/home/$user_btcln/.lnd/lnd.conf
			echo -e "bitcoin.node=bitcoind\n" >>/home/$user_btcln/.lnd/lnd.conf
			echo "[Bitcoind]" >>/home/$user_btcln/.lnd/lnd.conf
	
			config="`grep rpcuser /home/$user_btcln/.bitcoin/bitcoin.conf | cut -d'=' -f2`"
			echo "bitcoind.$config" >>/home/$user_btcln/.lnd/lnd.conf
	
			config="`grep rpcpassword /home/$user_btcln/.bitcoin/bitcoin.conf | cut -d'=' -f2`"
			echo "bitcoind.rpcpass=$config" >>/home/$user_btcln/.lnd/lnd.conf
	
			echo "bitcoind.zmqpubrawblock=tcp://127.0.0.1:18501" >>/home/$user_btcln/.lnd/lnd.conf
			echo "bitcoind.zmqpubrawtx=tcp://127.0.0.1:18502" >>/home/$user_btcln/.lnd/lnd.conf
	
			echo -e "..done! You will be able to start Lightning AFTER your bitcoin node has fully syncronised\n"
				
			# update shopd-btcln config
			echo "client=\"/home/$user_btcln/gocode/bin/lncli\"" >> /home/$user_btcln/.zatsuma/shopd-btcln.conf
	
			# tidy up
			rm go1.12.3.linux-amd64.tar.gz*
	
			# final message
			echo -e "...bitcoin lightning (lnd) has been installed\n"
		else 
			echo -e "...bitcoin lightning (lnd) has already been installed, skipping\n"
		fi

		echo -e "\n################ IMPORTANT ##################\n"
		echo -e "Before you can use Lightning Network you must :-"
		echo -e "- wait until your bitcoin node has fully syncronised"
		echo -e "- start your lighting node"
		echo -e "- create a wallet"
		echo -e "- unlock the wallet"
		echo -e "- wait until your lightning node has syncronised with bitcoin"
		echo -e "- fund the wallet"
		echo -e "- open a channel with incoming capacity\n"
		echo -e "################ IMPORTANT ##################\n"

		export HOME=$OLDHOME
	else
		echo "...failed to install lightning network, bitcoind is required but not installed"
	fi
fi


echo -e "\n\n\nInstallation complete !"

if [ ! -z $duckdns_domain ]
then
	echo "Your Zatsuma can be found at https://$duckdns_domain.duckdns.org"
else
	echo "Your Zatsuma can be found at http://127.0.0.1"
fi

echo -e "\nWhen you run the zatsuma daemon for the first time an admin account will be generated, to do that type :-\n"
echo "su - $user_zatsuma"
echo "/usr/local/bin/zatsuma/shopd"

echo -e "\nTo add a user to your zatsuma, type :-\n";
echo "su - $user_zatsuma"
echo "/usr/local/bin/zatsuma/shopd --adduser USERNAME		(random password is generated automatically)"

echo -e "\nFoz Zatsuma to work properly please ensure the following :-"
echo -e "\n- all coin nodes must be running and synchronized with their networks :-"
echo "  - zcashd"
echo "  - ycashd"
echo "  - bitcoind"
echo "  - lnd"
echo -e "\n- the zatsuma shop and node daemons must be running :-"
echo "  - shopd"
echo "  - shopd-zec"
echo "  - shopd-yec"
echo "  - shopd-btc"
echo "  - shopd-btcln"
